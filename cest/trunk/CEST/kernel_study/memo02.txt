8/23 memo 小川清　2001.8.27

メモです。

個人の感想をメモしました。#記号
議事はタイピングしたままで、まとめていません。

#personal position
#アセンブラは、8086しかプログラミングしたことがありません。
#アセンブラで組んだことがあるのは、
#モータの制御のプログラム。
#シリアルの通信ソフトの一部。
#VZエディタの移植。
#minixの移植の一部

#最初から、美しくないアセンブラを読んでいたので、
#美しいCPUのアセンブラのコードは、どう読んだらいいか、検討がつきません。

#Cコンパイラを作ったことがありますが、拡張したのは、条件分岐についてのみです。
#80286以上のCPUにはどう対処していいかわかりませんでした。
#すべての資源は自分で管理したことしかありません。
#CPUのユーザモード、特権モードをどう切り替えて使えばよいかわかりませんでした。

#このプロジェクトへの参加の目的
#現在、TCP/IPのmobile系への拡張を検討中
#TCP/IPまわりのプログラミングとOSの関係について調査
#組み込み系のOSのTCP/IPの実装について調査

#SHに関して、
#SHは、何から取り組めばよいかわかりませんでした。
#8086、Z8０のディスアセンブラを作ったことがあります。（C、BASIC）
#8086のディスアセンブラでは、ジャンプテーブルの最適化を一部実装しました。
#8086のジャンプの制約は、SHにおける１６ビット命令の制約によるジャンプの仕方に
似ているので、
#SHのコードが読みやすくなりました。

#8/23の個人的な成果
#SHのソースコードをどうやって読んだらいいかが、見通しがついた。
#ユーザモード、特権モードを切り替えるときの課題のいくつかがわかった。

#今後の課題
#SHのアセンブラまたはCのソースコードに対して、SHの機能をコメントしてみる。
#ユーザモード、特権モードを切り替えた場合の、デバッガの使い方を覚える。

１　SH
１６ビット長
５段パイプライン
１命令約１クロック

１．１	SH3
内部乗算機
メモリ管理機能
キャッシュ
デバッグ機能
1.8V
外部３．３V

図１で、Xバス、Yバスで図には何もないものは、
DSPにつながるバス
?SH２で、DSPの試験をせずに、出荷。

２　SH7709A
２．１メモリインタフェース
論理空間
キャッシャブル
P4外部バスにデータが流れない。
内臓RAM
キャッシュをRAMにした？
P3　論理空間？
３２ビットには、アクセス禁止している機能があるのでは？

２．２	内部周辺機器
CCRでキャッシュオンにするか、オフにするか。
　条件をORで設定して、すべてがオンになるとキャッシュする。

MMUをオフにすると、

BSC
　PCIの制御
SCI
　スマートカードインタフェース
　シリアル３本？

MMUがないころから、内臓RAMがあった。
SHシリーズでは、ものによっては、内臓RAMを全部または一部をキャッシュに使える。

SHでは、外部RAMは、内臓RAMは、３２ビット、ノンウェイト、

SH１は、
DSP内臓のものは、、、

いろいろ内臓、
選別はしていないか？

テスト容易化設計
テスト回路が数％占める。
JTAG,回路テスト用

建て増しを重ねるうちに、美しくなった。
ものすごい資産だと、、、



SRを直接いじるとどうなるか？

R０　インデックスレジスタ
割り込みがはいると、R0からR7は、バンク１になる。
特権モードでは、LDCなどで使える。

スタックは、オートインクリメントする。
パイプラインで、スタックをどう使う。

？GCCのレジスタ利用でこれでよいか？
理由、テスト結果など？

レジスタを退避するのはいや。
内部にシーケンサが必要
SPARCは、ウィンドウ化されたレジスタを持つ

割り込みが２段目だと、切り替えたい

デバッグで、スタックがエラーのときに、
何を信用するか

ユーザモード、特権モードが明確でないCPUの場合、
コンパイラが、使わないレジスタを持つ。

SH
比較が種類が多く、
分岐は少ない。

０ビット　：１を書き込んだらどうなるか？

タスクコンテキストで、
GBRを書き換えるかどうかは、
Cコンパイラで使うか、
Cでしかプログラムを使わないか。

？ベクタという用語

積和命令、出力先がない、出力先は、MACH,MACL

DSRの次の命令が入る。
RPSの命令をすると、PRからPCに値が入る。
ディスプレースメント（オフセット）

SH３は、ビッグエンディアンとリトルエンディアンを電源投入時に選択可能

５命令を９クロック
遅延スロットありは、４命令を９クロック
遅延スロットなしは、３命令を９クロック

アセンブラを読むための

オブジェクトコードサイズを小さくする。

分岐命令の先が、分岐命令だと、
遅延はうまくない。
コンパイラがそうならないようにする。

アセンブラを読むときに注意が必要。

それをサポートするツールがあればよいのでは？

パイプが乱れる場合は？

デバッガ屋さん。

効率がよい。
１６ビット長なので、３２ビットデータを扱うのに、
場所を、別の場所におく。
無駄なブランチが起きる。
ディスプレースメントが小さい。
関数が大きいと困る？
構造体が大きいと困る？

構造体が大きくなると、性能が出ないのでは？

データ型でスケーリングをかける。

論理演算命令

分岐　ｓがあると遅延
条件分岐は、BF,BT
Bがついているのは、PCからの相対

RISCは３がある。
３２ビットなら３つ取れる。
１６ビット長だから、、、

プログラムで、ロング、ワード、かためて書くので、
アラインがおかしくなることはないようにしている。

SHでは、最適化コンパイラをどのように作るか。

例外発生前に、止まるか。

カレント命令
　今の命令を指したままにするか、　次の命令を指すかどうか、を指定。

カーネルの中では、ブロックビットがたっているのは、最小限にする。

インテルのチップでは、外部割込みを止める。

CISCはスタックに積む。何重に割り込んでもよい。

RISCは、割り込みでレジスタに退避する。多重割り込みするときには、
ブロックして、SSR,SPCをスタックへ積む。
コンパイラが

SH2は、割り込みアーキテクチャがCISCっぽい？？

０９は、例外事象レジスタが２つ
０８は、例外事象レジスタが１つ

例外が２つ発生した場合、優先順位、
ブロック
リセット

割当表を見ると、想像ができるのでは？

割り込みは、マスクビットが高いものが入ってくる。
ハードでは割り込みに応じたマスクがあがらないので、自分でマスクを設定する。
カーネルの割り込みルーチンを見ればわかる。

バンクの０しかつ使わない。
R10のスタックエラーで起きる。

ハードウェアでは、スタックにつまない。
ソフトウェアでスタックにつむ。

例外では、何も積まない。
ぶロックビットがたっている間は、スタックには積まない。

割り込みでR0を使いたい。

ブロック中に例外が発生すると、リセットかかり、
デバッグできなくなる。

今回のターゲットは、リトルで動かしている。

外部のシリアルに、何を使うかで
どちらでも動く。
行儀のよいプログラムなら、どちらでも動く。

リンカにより、、、

SH1,２、ビックエンディアン
６８Kの関係で
WindowsCEを動かそうとすると、

TRONチップ
何をハードウェア化??
処理量の多いところ。

基本的な
リアルタイムOS
１０％あったら使わない。

そこにハードウェアリソースをつぎ込むか？

高速にタスクスイッチしたいなら？
でも、適用領域が限られる。

チップ面積、コスト、

コアを触らないと、ディスパッチが早くならない
周辺は、キューは早くなる。

レジスタ入れ替えが早くならない。

スイッチが早いのは、汎用ではない。

妥協の産物

汎用
専用

強い意志がないと、いじらないのが得策

ARM
コードサイズが小さい
消費電力は、ARMの方が小さい。

V850　コードサイズが小さい。

命令セットが汚いというのは、判断基準にはならない。
性能
コードサイズ
消費電力
値段
設計者数

ARM,MIPS,POWERPC
R6000
R1000

２プロセッサ
１つが落ちてもよい場合
