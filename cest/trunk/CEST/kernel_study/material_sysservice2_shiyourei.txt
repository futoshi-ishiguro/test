============================================================

./config/sh3/cpu_config.c
119 /*
120  * Trapa以外の例外で登録されていない例外が発生すると呼び出される
121  */
122 void cpu_expevt(VW expevt,VW spc,VW ssr,VW pr)
123 {
124     syslog(LOG_EMERG, "Expevt error occurs.");
125 
126     syslog(LOG_EMERG, "Expevt = %08x SPC = %08x SR = %08x PR=%08X",expevt,spc,
127              ssr,pr);
128     while(1);
129     exit();
130 }

============================================================

./include/jsp_stddef.h
054 /*
055  *  assertマクロの定義
056  */
057 #ifndef NDEBUG
058 #define assert(exp)							\
059 {									\
060 	if (!(exp)) {							\
061 		syslog(LOG_EMERG, "%s:%u: Assertion `%s' failed.",	\
062 					__FILE__, __LINE__, #exp);	\
063 		kernel_exit();						\
064 	}								\
065 }
066 #else /* NDEBUG */
067 #define	assert(exp)
068 #endif /* NDEBUG */

============================================================

./kernel/task_manage.c
123 /*
124  *  自タスクの終了
125  */
126 SYSCALL void
127 ext_tsk()
128 {
129 #ifdef ACTIVATED_STACK_SIZE
130 	/*
131 	 *  create_context と activate_context で，使用中のスタック領
132 	 *  域を破壊しないように，スタック上にダミー領域を確保する．
133 	 */
134 	(void) alloca(ACTIVATED_STACK_SIZE);
135 #endif /* ACTIVATED_STACK_SIZE */
136 
137 	if (sense_context()) {
138 		/*
139 		 *  非タスクコンテキストから ext_tsk が呼ばれた場合，
140 		 *  システムログにエラーを記録し，そのまま実行を続ける．
141 		 *  その結果，強制的にタスクコンテキストに切り換えて，
142 		 *  実行状態のタスクを終了させることになる．カーネルは
143 		 *  そのまま実行を継続するが，ターゲットによっては，非
144 		 *  タスクコンテキスト用のスタックにゴミが残ったり，割
145 		 *  込みハンドラのネスト数の管理に矛盾が生じたりする場
146 		 *  合がある．
147 		 */
148 		syslog(LOG_ALERT,
149 			"ext_tsk is called from non-task contexts.");
150 	}
151 	if (sense_lock()) {
152 		/*
153 		 *  CPUロック状態で ext_tsk が呼ばれた場合は，CPUロック
154 		 *  を解除してからタスクを終了する．実装上は，サービス
155 		 *  コール内でのCPUロックを省略すればよいだけ．
156 		 */
157 		syslog(LOG_WARNING,
158 			"ext_tsk is called from CPU locked state.");
159 	}
160 	else {
161 		if (sense_context()) {
162 			i_lock_cpu();
163 		}
164 		else  {
165 			t_lock_cpu();
166 		}
167 	}
168 	if (!(enadsp)) {
169 		/*
170 		 *  ディスパッチ禁止状態で ext_tsk が呼ばれた場合は，
171 		 *  ディスパッチ許可状態にしてからタスクを終了する．
172 		 */
173 		syslog(LOG_WARNING,
174 			"ext_tsk is called from dispatch disabled state.");
175 		enadsp = TRUE;
176 	}
177 	exit_task();
178 }

============================================================

./kernel/startup.c
051 	/*
052 	 *  システムログサービスの初期化
053 	 */
054 	syslog_initialize();

============================================================

./kernel/banner.c
052 void
053 print_banner()
054 {
055 	syslog(LOG_NOTICE, banner,
056 		(TKERNEL_PRVER >> 12) & 0x0f,
057 		(TKERNEL_PRVER >> 4) & 0xff,
058 		TKERNEL_PRVER & 0x0f,
059 		TARGET_NAME,
060 		__DATE__, __TIME__);
061 }

============================================================

./libjsp/jsp_perror.c
040 void
041 jsp_perror(const char *file, int line, const char *expr, ER ercd)
042 {
043 	syslog(LOG_ERR,
044 		"%s reported by `%s' in line %d of `%s'.",
045 		itron_strerror(ercd), expr, line, file);
046 }
