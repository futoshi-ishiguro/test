     1	/*
     2	 *  TOPPERS/JSP Kernel
     3	 *      Toyohashi Open Platform for Embedded Real-Time Systems/
     4	 *      Just Standard Profile Kernel
     5	 * 
     6	 *  Copyright (C) 2000 by Embedded and Real-Time Systems Laboratory
     7	 *                              Toyohashi Univ. of Technology, JAPAN
     8	 * 
     9	 *  上記著作権者は，以下の条件を満たす場合に限り，本ソフトウェア（本ソ
    10	 *  フトウェアを改変したものを含む．以下同じ）を使用・複製・改変・再配
    11	 *  布（以下，利用と呼ぶ）することを無償で許諾する．
    12	 *  (1) 本ソフトウェアをソースコードの形で利用する場合には，上記の著作
    13	 *      権表示，この利用条件および下記の無保証規定が，そのままの形でソー
    14	 *      スコード中に含まれていること．
    15	 *  (2) 本ソフトウェアをバイナリコードの形または機器に組み込んだ形で利
    16	 *      用する場合には，次のいずれかの条件を満たすこと．
    17	 *    (a) 利用に伴うドキュメント（利用者マニュアルなど）に，上記の著作
    18	 *        権表示，この利用条件および下記の無保証規定を掲載すること．
    19	 *    (b) 利用の形態を，別に定める方法によって，上記著作権者に報告する
    20	 *        こと．
    21	 *  (3) 本ソフトウェアの利用により直接的または間接的に生じるいかなる損
    22	 *      害からも，上記著作権者を免責すること．
    23	 * 
    24	 *  本ソフトウェアは，無保証で提供されているものである．上記著作権者は，
    25	 *  本ソフトウェアに関して，その適用可能性も含めて，いかなる保証も行わ
    26	 *  ない．また，本ソフトウェアの利用により直接的または間接的に生じたい
    27	 *  かなる損害に関しても，その責任を負わない．
    28	 * 
    29	 *  @(#) $Id: time_manage.c,v 1.1 2000/11/14 14:44:21 hiro Exp $
    30	 */
    31	
    32	/*
    33	 *	システム時刻管理機能
    34	 */
    35	
    36	#include "jsp_kernel.h"
    37	#include "check.h"
    38	#include "time_event.h"
    39	
    40	/*
    41	 *  システム時刻のオフセット
    42	 *
    43	 *  systim_offset が 0 に初期化されることを仮定している．0 に初期化さ
    44	 *  れない環境では，set_tim を呼び出して systim_offset を初期化するこ
    45	 *  とが必要．
    46	 */
    47	static SYSTIM	systim_offset;
    48	
    49	/*
    50	 *  システム時刻の設定
    51	 */
    52	SYSCALL ER
    53	set_tim(SYSTIM *pk_systim)
    54	{
    55		CHECK_TSKCTX_UNL();
    56	
    57		t_lock_cpu();
    58		systim_offset = *pk_systim - current_time;
    59		t_unlock_cpu();
    60		return(E_OK);
    61	}
    62	
    63	/*
    64	 *  システム時刻の参照
    65	 */
    66	SYSCALL ER
    67	get_tim(SYSTIM *pk_systim)
    68	{
    69		CHECK_TSKCTX_UNL();
    70	
    71		t_lock_cpu();
    72		*pk_systim = systim_offset + current_time;
    73		t_unlock_cpu();
    74		return(E_OK);
    75	}
    76	
    77	/*
    78	 *  性能評価用システム時刻の参照
    79	 */
    80	#ifdef SUPPORT_VXGET_TIM
    81	#include "hw_timer.h"
    82	
    83	SYSCALL ER
    84	vxget_tim(SYSUTIM *pk_sysutim)
    85	{
    86		SYSUTIM	utime;
    87		SYSTIM	time;
    88	#if TIC_DENO != 1
    89		INT	subtime;
    90	#endif /* TIC_DENO != 1 */
    91		CLOCK	clock;
    92		BOOL	ireq;
    93		BOOL	locked;
    94	
    95		CHECK_TSKCTX();
    96	
    97		locked = sense_lock();
    98		if (!(locked)) {
    99			t_lock_cpu();
   100		}
   101		time = systim_offset + next_time;
   102	#if TIC_DENO != 1
   103		subtime = (INT) next_subtime;
   104	#endif /* TIC_DENO != 1 */
   105		clock = hw_timer_get_current();
   106		ireq = hw_timer_fetch_interrupt();
   107		if (!(locked)) {
   108			t_unlock_cpu();
   109		}
   110	
   111		utime = ((SYSUTIM) time) * 1000;
   112	#if TIC_DENO != 1
   113		utime += subtime * 1000 / TIC_DENO
   114	#endif /* TIC_DENO != 1 */
   115		if (!(ireq) || clock >= (TO_CLOCK(TIC_NUME, TIC_DENO)
   116						- GET_TOLERANCE)) {
   117			utime -= TIC_NUME * 1000 / TIC_DENO;
   118		}
   119		utime += clock * 1000 / TIMER_CLOCK;
   120		*pk_sysutim = utime;
   121		return(E_OK);
   122	}
   123	
   124	#endif /* SUPPORT_VXGET_TIM */
